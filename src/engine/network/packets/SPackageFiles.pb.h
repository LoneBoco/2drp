// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SPackageFiles.proto

#ifndef PROTOBUF_SPackageFiles_2eproto__INCLUDED
#define PROTOBUF_SPackageFiles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_SPackageFiles_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSPackageFiles_FileImpl();
void InitDefaultsSPackageFiles_File();
void InitDefaultsSPackageFilesImpl();
void InitDefaultsSPackageFiles();
inline void InitDefaults() {
  InitDefaultsSPackageFiles_File();
  InitDefaultsSPackageFiles();
}
}  // namespace protobuf_SPackageFiles_2eproto
namespace tdrp {
namespace packet {
class SPackageFiles;
class SPackageFilesDefaultTypeInternal;
extern SPackageFilesDefaultTypeInternal _SPackageFiles_default_instance_;
class SPackageFiles_File;
class SPackageFiles_FileDefaultTypeInternal;
extern SPackageFiles_FileDefaultTypeInternal _SPackageFiles_File_default_instance_;
}  // namespace packet
}  // namespace tdrp
namespace tdrp {
namespace packet {

// ===================================================================

class SPackageFiles_File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.SPackageFiles.File) */ {
 public:
  SPackageFiles_File();
  virtual ~SPackageFiles_File();

  SPackageFiles_File(const SPackageFiles_File& from);

  inline SPackageFiles_File& operator=(const SPackageFiles_File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SPackageFiles_File(SPackageFiles_File&& from) noexcept
    : SPackageFiles_File() {
    *this = ::std::move(from);
  }

  inline SPackageFiles_File& operator=(SPackageFiles_File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SPackageFiles_File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPackageFiles_File* internal_default_instance() {
    return reinterpret_cast<const SPackageFiles_File*>(
               &_SPackageFiles_File_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SPackageFiles_File* other);
  friend void swap(SPackageFiles_File& a, SPackageFiles_File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SPackageFiles_File* New() const PROTOBUF_FINAL { return New(NULL); }

  SPackageFiles_File* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SPackageFiles_File& from);
  void MergeFrom(const SPackageFiles_File& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SPackageFiles_File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // fixed64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // fixed64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::uint64 date() const;
  void set_date(::google::protobuf::uint64 value);

  // fixed32 crc32 = 4;
  void clear_crc32();
  static const int kCrc32FieldNumber = 4;
  ::google::protobuf::uint32 crc32() const;
  void set_crc32(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tdrp.packet.SPackageFiles.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 date_;
  ::google::protobuf::uint32 crc32_;
  mutable int _cached_size_;
  friend struct ::protobuf_SPackageFiles_2eproto::TableStruct;
  friend void ::protobuf_SPackageFiles_2eproto::InitDefaultsSPackageFiles_FileImpl();
};
// -------------------------------------------------------------------

class SPackageFiles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.SPackageFiles) */ {
 public:
  SPackageFiles();
  virtual ~SPackageFiles();

  SPackageFiles(const SPackageFiles& from);

  inline SPackageFiles& operator=(const SPackageFiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SPackageFiles(SPackageFiles&& from) noexcept
    : SPackageFiles() {
    *this = ::std::move(from);
  }

  inline SPackageFiles& operator=(SPackageFiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SPackageFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPackageFiles* internal_default_instance() {
    return reinterpret_cast<const SPackageFiles*>(
               &_SPackageFiles_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SPackageFiles* other);
  friend void swap(SPackageFiles& a, SPackageFiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SPackageFiles* New() const PROTOBUF_FINAL { return New(NULL); }

  SPackageFiles* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SPackageFiles& from);
  void MergeFrom(const SPackageFiles& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SPackageFiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SPackageFiles_File File;

  // accessors -------------------------------------------------------

  // repeated .tdrp.packet.SPackageFiles.File files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  const ::tdrp::packet::SPackageFiles_File& files(int index) const;
  ::tdrp::packet::SPackageFiles_File* mutable_files(int index);
  ::tdrp::packet::SPackageFiles_File* add_files();
  ::google::protobuf::RepeatedPtrField< ::tdrp::packet::SPackageFiles_File >*
      mutable_files();
  const ::google::protobuf::RepeatedPtrField< ::tdrp::packet::SPackageFiles_File >&
      files() const;

  // @@protoc_insertion_point(class_scope:tdrp.packet.SPackageFiles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tdrp::packet::SPackageFiles_File > files_;
  mutable int _cached_size_;
  friend struct ::protobuf_SPackageFiles_2eproto::TableStruct;
  friend void ::protobuf_SPackageFiles_2eproto::InitDefaultsSPackageFilesImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SPackageFiles_File

// string name = 1;
inline void SPackageFiles_File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SPackageFiles_File::name() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SPackageFiles.File.name)
  return name_.GetNoArena();
}
inline void SPackageFiles_File::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SPackageFiles.File.name)
}
#if LANG_CXX11
inline void SPackageFiles_File::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SPackageFiles.File.name)
}
#endif
inline void SPackageFiles_File::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SPackageFiles.File.name)
}
inline void SPackageFiles_File::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SPackageFiles.File.name)
}
inline ::std::string* SPackageFiles_File::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SPackageFiles.File.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SPackageFiles_File::release_name() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SPackageFiles.File.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SPackageFiles_File::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SPackageFiles.File.name)
}

// fixed64 size = 2;
inline void SPackageFiles_File::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPackageFiles_File::size() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SPackageFiles.File.size)
  return size_;
}
inline void SPackageFiles_File::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.SPackageFiles.File.size)
}

// fixed64 date = 3;
inline void SPackageFiles_File::clear_date() {
  date_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPackageFiles_File::date() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SPackageFiles.File.date)
  return date_;
}
inline void SPackageFiles_File::set_date(::google::protobuf::uint64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.SPackageFiles.File.date)
}

// fixed32 crc32 = 4;
inline void SPackageFiles_File::clear_crc32() {
  crc32_ = 0u;
}
inline ::google::protobuf::uint32 SPackageFiles_File::crc32() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SPackageFiles.File.crc32)
  return crc32_;
}
inline void SPackageFiles_File::set_crc32(::google::protobuf::uint32 value) {
  
  crc32_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.SPackageFiles.File.crc32)
}

// -------------------------------------------------------------------

// SPackageFiles

// repeated .tdrp.packet.SPackageFiles.File files = 1;
inline int SPackageFiles::files_size() const {
  return files_.size();
}
inline void SPackageFiles::clear_files() {
  files_.Clear();
}
inline const ::tdrp::packet::SPackageFiles_File& SPackageFiles::files(int index) const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SPackageFiles.files)
  return files_.Get(index);
}
inline ::tdrp::packet::SPackageFiles_File* SPackageFiles::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SPackageFiles.files)
  return files_.Mutable(index);
}
inline ::tdrp::packet::SPackageFiles_File* SPackageFiles::add_files() {
  // @@protoc_insertion_point(field_add:tdrp.packet.SPackageFiles.files)
  return files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tdrp::packet::SPackageFiles_File >*
SPackageFiles::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:tdrp.packet.SPackageFiles.files)
  return &files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tdrp::packet::SPackageFiles_File >&
SPackageFiles::files() const {
  // @@protoc_insertion_point(field_list:tdrp.packet.SPackageFiles.files)
  return files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SPackageFiles_2eproto__INCLUDED
