// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CRequestFile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CRequestFile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CRequestFile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CRequestFile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CRequestFile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CRequestFile_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_CRequestFile_2eproto_metadata_getter(int index);
namespace tdrp {
namespace packet {
class CRequestFile;
struct CRequestFileDefaultTypeInternal;
extern CRequestFileDefaultTypeInternal _CRequestFile_default_instance_;
}  // namespace packet
}  // namespace tdrp
PROTOBUF_NAMESPACE_OPEN
template<> ::tdrp::packet::CRequestFile* Arena::CreateMaybeMessage<::tdrp::packet::CRequestFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tdrp {
namespace packet {

// ===================================================================

class CRequestFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.CRequestFile) */ {
 public:
  inline CRequestFile() : CRequestFile(nullptr) {}
  virtual ~CRequestFile();
  explicit constexpr CRequestFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRequestFile(const CRequestFile& from);
  CRequestFile(CRequestFile&& from) noexcept
    : CRequestFile() {
    *this = ::std::move(from);
  }

  inline CRequestFile& operator=(const CRequestFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRequestFile& operator=(CRequestFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRequestFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRequestFile* internal_default_instance() {
    return reinterpret_cast<const CRequestFile*>(
               &_CRequestFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CRequestFile& a, CRequestFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CRequestFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRequestFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRequestFile* New() const final {
    return CreateMaybeMessage<CRequestFile>(nullptr);
  }

  CRequestFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRequestFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRequestFile& from);
  void MergeFrom(const CRequestFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRequestFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tdrp.packet.CRequestFile";
  }
  protected:
  explicit CRequestFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_CRequestFile_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // repeated string file = 1;
  int file_size() const;
  private:
  int _internal_file_size() const;
  public:
  void clear_file();
  const std::string& file(int index) const;
  std::string* mutable_file(int index);
  void set_file(int index, const std::string& value);
  void set_file(int index, std::string&& value);
  void set_file(int index, const char* value);
  void set_file(int index, const char* value, size_t size);
  std::string* add_file();
  void add_file(const std::string& value);
  void add_file(std::string&& value);
  void add_file(const char* value);
  void add_file(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file();
  private:
  const std::string& _internal_file(int index) const;
  std::string* _internal_add_file();
  public:

  // @@protoc_insertion_point(class_scope:tdrp.packet.CRequestFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CRequestFile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CRequestFile

// repeated string file = 1;
inline int CRequestFile::_internal_file_size() const {
  return file_.size();
}
inline int CRequestFile::file_size() const {
  return _internal_file_size();
}
inline void CRequestFile::clear_file() {
  file_.Clear();
}
inline std::string* CRequestFile::add_file() {
  // @@protoc_insertion_point(field_add_mutable:tdrp.packet.CRequestFile.file)
  return _internal_add_file();
}
inline const std::string& CRequestFile::_internal_file(int index) const {
  return file_.Get(index);
}
inline const std::string& CRequestFile::file(int index) const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CRequestFile.file)
  return _internal_file(index);
}
inline std::string* CRequestFile::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.CRequestFile.file)
  return file_.Mutable(index);
}
inline void CRequestFile::set_file(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tdrp.packet.CRequestFile.file)
  file_.Mutable(index)->assign(value);
}
inline void CRequestFile::set_file(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tdrp.packet.CRequestFile.file)
  file_.Mutable(index)->assign(std::move(value));
}
inline void CRequestFile::set_file(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tdrp.packet.CRequestFile.file)
}
inline void CRequestFile::set_file(int index, const char* value, size_t size) {
  file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.CRequestFile.file)
}
inline std::string* CRequestFile::_internal_add_file() {
  return file_.Add();
}
inline void CRequestFile::add_file(const std::string& value) {
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tdrp.packet.CRequestFile.file)
}
inline void CRequestFile::add_file(std::string&& value) {
  file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tdrp.packet.CRequestFile.file)
}
inline void CRequestFile::add_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tdrp.packet.CRequestFile.file)
}
inline void CRequestFile::add_file(const char* value, size_t size) {
  file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tdrp.packet.CRequestFile.file)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CRequestFile::file() const {
  // @@protoc_insertion_point(field_list:tdrp.packet.CRequestFile.file)
  return file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CRequestFile::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:tdrp.packet.CRequestFile.file)
  return &file_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CRequestFile_2eproto
