// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: STransferFile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_STransferFile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_STransferFile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_STransferFile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_STransferFile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_STransferFile_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_STransferFile_2eproto_metadata_getter(int index);
namespace tdrp {
namespace packet {
class STransferFile;
struct STransferFileDefaultTypeInternal;
extern STransferFileDefaultTypeInternal _STransferFile_default_instance_;
}  // namespace packet
}  // namespace tdrp
PROTOBUF_NAMESPACE_OPEN
template<> ::tdrp::packet::STransferFile* Arena::CreateMaybeMessage<::tdrp::packet::STransferFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tdrp {
namespace packet {

enum STransferFile_Type : int {
  STransferFile_Type_PACKAGE = 0,
  STransferFile_Type_IMAGE = 1,
  STransferFile_Type_STransferFile_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  STransferFile_Type_STransferFile_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool STransferFile_Type_IsValid(int value);
constexpr STransferFile_Type STransferFile_Type_Type_MIN = STransferFile_Type_PACKAGE;
constexpr STransferFile_Type STransferFile_Type_Type_MAX = STransferFile_Type_IMAGE;
constexpr int STransferFile_Type_Type_ARRAYSIZE = STransferFile_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STransferFile_Type_descriptor();
template<typename T>
inline const std::string& STransferFile_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STransferFile_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STransferFile_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STransferFile_Type_descriptor(), enum_t_value);
}
inline bool STransferFile_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, STransferFile_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STransferFile_Type>(
    STransferFile_Type_descriptor(), name, value);
}
// ===================================================================

class STransferFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.STransferFile) */ {
 public:
  inline STransferFile() : STransferFile(nullptr) {}
  virtual ~STransferFile();
  explicit constexpr STransferFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STransferFile(const STransferFile& from);
  STransferFile(STransferFile&& from) noexcept
    : STransferFile() {
    *this = ::std::move(from);
  }

  inline STransferFile& operator=(const STransferFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline STransferFile& operator=(STransferFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STransferFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const STransferFile* internal_default_instance() {
    return reinterpret_cast<const STransferFile*>(
               &_STransferFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(STransferFile& a, STransferFile& b) {
    a.Swap(&b);
  }
  inline void Swap(STransferFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STransferFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STransferFile* New() const final {
    return CreateMaybeMessage<STransferFile>(nullptr);
  }

  STransferFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STransferFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STransferFile& from);
  void MergeFrom(const STransferFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STransferFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tdrp.packet.STransferFile";
  }
  protected:
  explicit STransferFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_STransferFile_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef STransferFile_Type Type;
  static constexpr Type PACKAGE =
    STransferFile_Type_PACKAGE;
  static constexpr Type IMAGE =
    STransferFile_Type_IMAGE;
  static inline bool Type_IsValid(int value) {
    return STransferFile_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    STransferFile_Type_Type_MIN;
  static constexpr Type Type_MAX =
    STransferFile_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    STransferFile_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return STransferFile_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return STransferFile_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return STransferFile_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFileFieldNumber = 4,
    kDateFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes file = 4;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // sfixed64 date = 3;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .tdrp.packet.STransferFile.Type type = 1;
  void clear_type();
  ::tdrp::packet::STransferFile_Type type() const;
  void set_type(::tdrp::packet::STransferFile_Type value);
  private:
  ::tdrp::packet::STransferFile_Type _internal_type() const;
  void _internal_set_type(::tdrp::packet::STransferFile_Type value);
  public:

  // @@protoc_insertion_point(class_scope:tdrp.packet.STransferFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_STransferFile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// STransferFile

// .tdrp.packet.STransferFile.Type type = 1;
inline void STransferFile::clear_type() {
  type_ = 0;
}
inline ::tdrp::packet::STransferFile_Type STransferFile::_internal_type() const {
  return static_cast< ::tdrp::packet::STransferFile_Type >(type_);
}
inline ::tdrp::packet::STransferFile_Type STransferFile::type() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.STransferFile.type)
  return _internal_type();
}
inline void STransferFile::_internal_set_type(::tdrp::packet::STransferFile_Type value) {
  
  type_ = value;
}
inline void STransferFile::set_type(::tdrp::packet::STransferFile_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.STransferFile.type)
}

// string name = 2;
inline void STransferFile::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& STransferFile::name() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.STransferFile.name)
  return _internal_name();
}
inline void STransferFile::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.STransferFile.name)
}
inline std::string* STransferFile::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.STransferFile.name)
  return _internal_mutable_name();
}
inline const std::string& STransferFile::_internal_name() const {
  return name_.Get();
}
inline void STransferFile::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void STransferFile::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.STransferFile.name)
}
inline void STransferFile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.STransferFile.name)
}
inline void STransferFile::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.STransferFile.name)
}
inline std::string* STransferFile::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* STransferFile::release_name() {
  // @@protoc_insertion_point(field_release:tdrp.packet.STransferFile.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void STransferFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.STransferFile.name)
}

// sfixed64 date = 3;
inline void STransferFile::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STransferFile::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STransferFile::date() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.STransferFile.date)
  return _internal_date();
}
inline void STransferFile::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_ = value;
}
inline void STransferFile::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.STransferFile.date)
}

// bytes file = 4;
inline void STransferFile::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& STransferFile::file() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.STransferFile.file)
  return _internal_file();
}
inline void STransferFile::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.STransferFile.file)
}
inline std::string* STransferFile::mutable_file() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.STransferFile.file)
  return _internal_mutable_file();
}
inline const std::string& STransferFile::_internal_file() const {
  return file_.Get();
}
inline void STransferFile::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void STransferFile::set_file(std::string&& value) {
  
  file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.STransferFile.file)
}
inline void STransferFile::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.STransferFile.file)
}
inline void STransferFile::set_file(const void* value,
    size_t size) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.STransferFile.file)
}
inline std::string* STransferFile::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* STransferFile::release_file() {
  // @@protoc_insertion_point(field_release:tdrp.packet.STransferFile.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void STransferFile::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.STransferFile.file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tdrp::packet::STransferFile_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tdrp::packet::STransferFile_Type>() {
  return ::tdrp::packet::STransferFile_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_STransferFile_2eproto
