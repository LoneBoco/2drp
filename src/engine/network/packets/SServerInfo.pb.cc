// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SServerInfo.proto

#include "SServerInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tdrp {
namespace packet {
constexpr SServerInfo_File::SServerInfo_File(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(PROTOBUF_ULONGLONG(0))
  , date_(PROTOBUF_LONGLONG(0))
  , crc32_(0u){}
struct SServerInfo_FileDefaultTypeInternal {
  constexpr SServerInfo_FileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SServerInfo_FileDefaultTypeInternal() {}
  union {
    SServerInfo_File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SServerInfo_FileDefaultTypeInternal _SServerInfo_File_default_instance_;
constexpr SServerInfo::SServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_()
  , uniqueid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , package_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loadingscene_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SServerInfoDefaultTypeInternal {
  constexpr SServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SServerInfoDefaultTypeInternal() {}
  union {
    SServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SServerInfoDefaultTypeInternal _SServerInfo_default_instance_;
}  // namespace packet
}  // namespace tdrp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SServerInfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SServerInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SServerInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SServerInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo_File, name_),
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo_File, size_),
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo_File, date_),
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo_File, crc32_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo, uniqueid_),
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo, package_),
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo, loadingscene_),
  PROTOBUF_FIELD_OFFSET(::tdrp::packet::SServerInfo, files_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tdrp::packet::SServerInfo_File)},
  { 9, -1, sizeof(::tdrp::packet::SServerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tdrp::packet::_SServerInfo_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tdrp::packet::_SServerInfo_default_instance_),
};

const char descriptor_table_protodef_SServerInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021SServerInfo.proto\022\013tdrp.packet\"\265\001\n\013SSe"
  "rverInfo\022\020\n\010uniqueid\030\001 \001(\t\022\017\n\007package\030\002 "
  "\001(\t\022\024\n\014loadingscene\030\003 \001(\t\022,\n\005files\030\004 \003(\013"
  "2\035.tdrp.packet.SServerInfo.File\032\?\n\004File\022"
  "\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\006\022\014\n\004date\030\003 \001("
  "\020\022\r\n\005crc32\030\004 \001(\007b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SServerInfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SServerInfo_2eproto = {
  false, false, 224, descriptor_table_protodef_SServerInfo_2eproto, "SServerInfo.proto", 
  &descriptor_table_SServerInfo_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_SServerInfo_2eproto::offsets,
  file_level_metadata_SServerInfo_2eproto, file_level_enum_descriptors_SServerInfo_2eproto, file_level_service_descriptors_SServerInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_SServerInfo_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SServerInfo_2eproto);
  return descriptor_table_SServerInfo_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SServerInfo_2eproto(&descriptor_table_SServerInfo_2eproto);
namespace tdrp {
namespace packet {

// ===================================================================

class SServerInfo_File::_Internal {
 public:
};

SServerInfo_File::SServerInfo_File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tdrp.packet.SServerInfo.File)
}
SServerInfo_File::SServerInfo_File(const SServerInfo_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc32_) -
    reinterpret_cast<char*>(&size_)) + sizeof(crc32_));
  // @@protoc_insertion_point(copy_constructor:tdrp.packet.SServerInfo.File)
}

void SServerInfo_File::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc32_) -
    reinterpret_cast<char*>(&size_)) + sizeof(crc32_));
}

SServerInfo_File::~SServerInfo_File() {
  // @@protoc_insertion_point(destructor:tdrp.packet.SServerInfo.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SServerInfo_File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SServerInfo_File::ArenaDtor(void* object) {
  SServerInfo_File* _this = reinterpret_cast< SServerInfo_File* >(object);
  (void)_this;
}
void SServerInfo_File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SServerInfo_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SServerInfo_File::Clear() {
// @@protoc_insertion_point(message_clear_start:tdrp.packet.SServerInfo.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc32_) -
      reinterpret_cast<char*>(&size_)) + sizeof(crc32_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SServerInfo_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tdrp.packet.SServerInfo.File.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed64 date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // fixed32 crc32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          crc32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SServerInfo_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tdrp.packet.SServerInfo.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tdrp.packet.SServerInfo.File.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // fixed64 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_size(), target);
  }

  // sfixed64 date = 3;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_date(), target);
  }

  // fixed32 crc32 = 4;
  if (this->crc32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_crc32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tdrp.packet.SServerInfo.File)
  return target;
}

size_t SServerInfo_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tdrp.packet.SServerInfo.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // fixed64 size = 2;
  if (this->size() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 date = 3;
  if (this->date() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 crc32 = 4;
  if (this->crc32() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SServerInfo_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tdrp.packet.SServerInfo.File)
  GOOGLE_DCHECK_NE(&from, this);
  const SServerInfo_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SServerInfo_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tdrp.packet.SServerInfo.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tdrp.packet.SServerInfo.File)
    MergeFrom(*source);
  }
}

void SServerInfo_File::MergeFrom(const SServerInfo_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tdrp.packet.SServerInfo.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.crc32() != 0) {
    _internal_set_crc32(from._internal_crc32());
  }
}

void SServerInfo_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tdrp.packet.SServerInfo.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SServerInfo_File::CopyFrom(const SServerInfo_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tdrp.packet.SServerInfo.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SServerInfo_File::IsInitialized() const {
  return true;
}

void SServerInfo_File::InternalSwap(SServerInfo_File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SServerInfo_File, crc32_)
      + sizeof(SServerInfo_File::crc32_)
      - PROTOBUF_FIELD_OFFSET(SServerInfo_File, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SServerInfo_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SServerInfo::_Internal {
 public:
};

SServerInfo::SServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tdrp.packet.SServerInfo)
}
SServerInfo::SServerInfo(const SServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uniqueid().empty()) {
    uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uniqueid(), 
      GetArena());
  }
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_package().empty()) {
    package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package(), 
      GetArena());
  }
  loadingscene_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loadingscene().empty()) {
    loadingscene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loadingscene(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tdrp.packet.SServerInfo)
}

void SServerInfo::SharedCtor() {
uniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
loadingscene_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SServerInfo::~SServerInfo() {
  // @@protoc_insertion_point(destructor:tdrp.packet.SServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uniqueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loadingscene_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SServerInfo::ArenaDtor(void* object) {
  SServerInfo* _this = reinterpret_cast< SServerInfo* >(object);
  (void)_this;
}
void SServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tdrp.packet.SServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  uniqueid_.ClearToEmpty();
  package_.ClearToEmpty();
  loadingscene_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uniqueid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uniqueid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tdrp.packet.SServerInfo.uniqueid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string package = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_package();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tdrp.packet.SServerInfo.package"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string loadingscene = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_loadingscene();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tdrp.packet.SServerInfo.loadingscene"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tdrp.packet.SServerInfo.File files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tdrp.packet.SServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uniqueid = 1;
  if (this->uniqueid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uniqueid().data(), static_cast<int>(this->_internal_uniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tdrp.packet.SServerInfo.uniqueid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uniqueid(), target);
  }

  // string package = 2;
  if (this->package().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package().data(), static_cast<int>(this->_internal_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tdrp.packet.SServerInfo.package");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package(), target);
  }

  // string loadingscene = 3;
  if (this->loadingscene().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loadingscene().data(), static_cast<int>(this->_internal_loadingscene().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tdrp.packet.SServerInfo.loadingscene");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_loadingscene(), target);
  }

  // repeated .tdrp.packet.SServerInfo.File files = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tdrp.packet.SServerInfo)
  return target;
}

size_t SServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tdrp.packet.SServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tdrp.packet.SServerInfo.File files = 4;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uniqueid = 1;
  if (this->uniqueid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniqueid());
  }

  // string package = 2;
  if (this->package().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package());
  }

  // string loadingscene = 3;
  if (this->loadingscene().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loadingscene());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tdrp.packet.SServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tdrp.packet.SServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tdrp.packet.SServerInfo)
    MergeFrom(*source);
  }
}

void SServerInfo::MergeFrom(const SServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tdrp.packet.SServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.uniqueid().size() > 0) {
    _internal_set_uniqueid(from._internal_uniqueid());
  }
  if (from.package().size() > 0) {
    _internal_set_package(from._internal_package());
  }
  if (from.loadingscene().size() > 0) {
    _internal_set_loadingscene(from._internal_loadingscene());
  }
}

void SServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tdrp.packet.SServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SServerInfo::CopyFrom(const SServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tdrp.packet.SServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SServerInfo::IsInitialized() const {
  return true;
}

void SServerInfo::InternalSwap(SServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  uniqueid_.Swap(&other->uniqueid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  loadingscene_.Swap(&other->loadingscene_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packet
}  // namespace tdrp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tdrp::packet::SServerInfo_File* Arena::CreateMaybeMessage< ::tdrp::packet::SServerInfo_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tdrp::packet::SServerInfo_File >(arena);
}
template<> PROTOBUF_NOINLINE ::tdrp::packet::SServerInfo* Arena::CreateMaybeMessage< ::tdrp::packet::SServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tdrp::packet::SServerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
