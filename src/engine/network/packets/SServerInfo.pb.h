// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SServerInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SServerInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SServerInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SServerInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SServerInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SServerInfo_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_SServerInfo_2eproto_metadata_getter(int index);
namespace tdrp {
namespace packet {
class SServerInfo;
struct SServerInfoDefaultTypeInternal;
extern SServerInfoDefaultTypeInternal _SServerInfo_default_instance_;
class SServerInfo_File;
struct SServerInfo_FileDefaultTypeInternal;
extern SServerInfo_FileDefaultTypeInternal _SServerInfo_File_default_instance_;
}  // namespace packet
}  // namespace tdrp
PROTOBUF_NAMESPACE_OPEN
template<> ::tdrp::packet::SServerInfo* Arena::CreateMaybeMessage<::tdrp::packet::SServerInfo>(Arena*);
template<> ::tdrp::packet::SServerInfo_File* Arena::CreateMaybeMessage<::tdrp::packet::SServerInfo_File>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tdrp {
namespace packet {

// ===================================================================

class SServerInfo_File PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.SServerInfo.File) */ {
 public:
  inline SServerInfo_File() : SServerInfo_File(nullptr) {}
  virtual ~SServerInfo_File();
  explicit constexpr SServerInfo_File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SServerInfo_File(const SServerInfo_File& from);
  SServerInfo_File(SServerInfo_File&& from) noexcept
    : SServerInfo_File() {
    *this = ::std::move(from);
  }

  inline SServerInfo_File& operator=(const SServerInfo_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline SServerInfo_File& operator=(SServerInfo_File&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SServerInfo_File& default_instance() {
    return *internal_default_instance();
  }
  static inline const SServerInfo_File* internal_default_instance() {
    return reinterpret_cast<const SServerInfo_File*>(
               &_SServerInfo_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SServerInfo_File& a, SServerInfo_File& b) {
    a.Swap(&b);
  }
  inline void Swap(SServerInfo_File* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SServerInfo_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SServerInfo_File* New() const final {
    return CreateMaybeMessage<SServerInfo_File>(nullptr);
  }

  SServerInfo_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SServerInfo_File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SServerInfo_File& from);
  void MergeFrom(const SServerInfo_File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SServerInfo_File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tdrp.packet.SServerInfo.File";
  }
  protected:
  explicit SServerInfo_File(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_SServerInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kDateFieldNumber = 3,
    kCrc32FieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // fixed64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 date = 3;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed32 crc32 = 4;
  void clear_crc32();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32() const;
  void set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc32() const;
  void _internal_set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tdrp.packet.SServerInfo.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SServerInfo_2eproto;
};
// -------------------------------------------------------------------

class SServerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.SServerInfo) */ {
 public:
  inline SServerInfo() : SServerInfo(nullptr) {}
  virtual ~SServerInfo();
  explicit constexpr SServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SServerInfo(const SServerInfo& from);
  SServerInfo(SServerInfo&& from) noexcept
    : SServerInfo() {
    *this = ::std::move(from);
  }

  inline SServerInfo& operator=(const SServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SServerInfo& operator=(SServerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SServerInfo* internal_default_instance() {
    return reinterpret_cast<const SServerInfo*>(
               &_SServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SServerInfo& a, SServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SServerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SServerInfo* New() const final {
    return CreateMaybeMessage<SServerInfo>(nullptr);
  }

  SServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SServerInfo& from);
  void MergeFrom(const SServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tdrp.packet.SServerInfo";
  }
  protected:
  explicit SServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_SServerInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SServerInfo_File File;

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
    kUniqueidFieldNumber = 1,
    kPackageFieldNumber = 2,
    kLoadingsceneFieldNumber = 3,
  };
  // repeated .tdrp.packet.SServerInfo.File files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::tdrp::packet::SServerInfo_File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tdrp::packet::SServerInfo_File >*
      mutable_files();
  private:
  const ::tdrp::packet::SServerInfo_File& _internal_files(int index) const;
  ::tdrp::packet::SServerInfo_File* _internal_add_files();
  public:
  const ::tdrp::packet::SServerInfo_File& files(int index) const;
  ::tdrp::packet::SServerInfo_File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tdrp::packet::SServerInfo_File >&
      files() const;

  // string uniqueid = 1;
  void clear_uniqueid();
  const std::string& uniqueid() const;
  void set_uniqueid(const std::string& value);
  void set_uniqueid(std::string&& value);
  void set_uniqueid(const char* value);
  void set_uniqueid(const char* value, size_t size);
  std::string* mutable_uniqueid();
  std::string* release_uniqueid();
  void set_allocated_uniqueid(std::string* uniqueid);
  private:
  const std::string& _internal_uniqueid() const;
  void _internal_set_uniqueid(const std::string& value);
  std::string* _internal_mutable_uniqueid();
  public:

  // string package = 2;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);
  private:
  const std::string& _internal_package() const;
  void _internal_set_package(const std::string& value);
  std::string* _internal_mutable_package();
  public:

  // string loadingscene = 3;
  void clear_loadingscene();
  const std::string& loadingscene() const;
  void set_loadingscene(const std::string& value);
  void set_loadingscene(std::string&& value);
  void set_loadingscene(const char* value);
  void set_loadingscene(const char* value, size_t size);
  std::string* mutable_loadingscene();
  std::string* release_loadingscene();
  void set_allocated_loadingscene(std::string* loadingscene);
  private:
  const std::string& _internal_loadingscene() const;
  void _internal_set_loadingscene(const std::string& value);
  std::string* _internal_mutable_loadingscene();
  public:

  // @@protoc_insertion_point(class_scope:tdrp.packet.SServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tdrp::packet::SServerInfo_File > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadingscene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SServerInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SServerInfo_File

// string name = 1;
inline void SServerInfo_File::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SServerInfo_File::name() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.File.name)
  return _internal_name();
}
inline void SServerInfo_File::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SServerInfo.File.name)
}
inline std::string* SServerInfo_File::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SServerInfo.File.name)
  return _internal_mutable_name();
}
inline const std::string& SServerInfo_File::_internal_name() const {
  return name_.Get();
}
inline void SServerInfo_File::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SServerInfo_File::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SServerInfo.File.name)
}
inline void SServerInfo_File::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SServerInfo.File.name)
}
inline void SServerInfo_File::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SServerInfo.File.name)
}
inline std::string* SServerInfo_File::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SServerInfo_File::release_name() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SServerInfo.File.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SServerInfo_File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SServerInfo.File.name)
}

// fixed64 size = 2;
inline void SServerInfo_File::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SServerInfo_File::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SServerInfo_File::size() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.File.size)
  return _internal_size();
}
inline void SServerInfo_File::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void SServerInfo_File::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SServerInfo.File.size)
}

// sfixed64 date = 3;
inline void SServerInfo_File::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SServerInfo_File::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SServerInfo_File::date() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.File.date)
  return _internal_date();
}
inline void SServerInfo_File::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_ = value;
}
inline void SServerInfo_File::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SServerInfo.File.date)
}

// fixed32 crc32 = 4;
inline void SServerInfo_File::clear_crc32() {
  crc32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SServerInfo_File::_internal_crc32() const {
  return crc32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SServerInfo_File::crc32() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.File.crc32)
  return _internal_crc32();
}
inline void SServerInfo_File::_internal_set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crc32_ = value;
}
inline void SServerInfo_File::set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc32(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SServerInfo.File.crc32)
}

// -------------------------------------------------------------------

// SServerInfo

// string uniqueid = 1;
inline void SServerInfo::clear_uniqueid() {
  uniqueid_.ClearToEmpty();
}
inline const std::string& SServerInfo::uniqueid() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.uniqueid)
  return _internal_uniqueid();
}
inline void SServerInfo::set_uniqueid(const std::string& value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SServerInfo.uniqueid)
}
inline std::string* SServerInfo::mutable_uniqueid() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SServerInfo.uniqueid)
  return _internal_mutable_uniqueid();
}
inline const std::string& SServerInfo::_internal_uniqueid() const {
  return uniqueid_.Get();
}
inline void SServerInfo::_internal_set_uniqueid(const std::string& value) {
  
  uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SServerInfo::set_uniqueid(std::string&& value) {
  
  uniqueid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SServerInfo.uniqueid)
}
inline void SServerInfo::set_uniqueid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SServerInfo.uniqueid)
}
inline void SServerInfo::set_uniqueid(const char* value,
    size_t size) {
  
  uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SServerInfo.uniqueid)
}
inline std::string* SServerInfo::_internal_mutable_uniqueid() {
  
  return uniqueid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SServerInfo::release_uniqueid() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SServerInfo.uniqueid)
  return uniqueid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SServerInfo::set_allocated_uniqueid(std::string* uniqueid) {
  if (uniqueid != nullptr) {
    
  } else {
    
  }
  uniqueid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uniqueid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SServerInfo.uniqueid)
}

// string package = 2;
inline void SServerInfo::clear_package() {
  package_.ClearToEmpty();
}
inline const std::string& SServerInfo::package() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.package)
  return _internal_package();
}
inline void SServerInfo::set_package(const std::string& value) {
  _internal_set_package(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SServerInfo.package)
}
inline std::string* SServerInfo::mutable_package() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SServerInfo.package)
  return _internal_mutable_package();
}
inline const std::string& SServerInfo::_internal_package() const {
  return package_.Get();
}
inline void SServerInfo::_internal_set_package(const std::string& value) {
  
  package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SServerInfo::set_package(std::string&& value) {
  
  package_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SServerInfo.package)
}
inline void SServerInfo::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SServerInfo.package)
}
inline void SServerInfo::set_package(const char* value,
    size_t size) {
  
  package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SServerInfo.package)
}
inline std::string* SServerInfo::_internal_mutable_package() {
  
  return package_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SServerInfo::release_package() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SServerInfo.package)
  return package_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SServerInfo::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    
  } else {
    
  }
  package_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SServerInfo.package)
}

// string loadingscene = 3;
inline void SServerInfo::clear_loadingscene() {
  loadingscene_.ClearToEmpty();
}
inline const std::string& SServerInfo::loadingscene() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.loadingscene)
  return _internal_loadingscene();
}
inline void SServerInfo::set_loadingscene(const std::string& value) {
  _internal_set_loadingscene(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SServerInfo.loadingscene)
}
inline std::string* SServerInfo::mutable_loadingscene() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SServerInfo.loadingscene)
  return _internal_mutable_loadingscene();
}
inline const std::string& SServerInfo::_internal_loadingscene() const {
  return loadingscene_.Get();
}
inline void SServerInfo::_internal_set_loadingscene(const std::string& value) {
  
  loadingscene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SServerInfo::set_loadingscene(std::string&& value) {
  
  loadingscene_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SServerInfo.loadingscene)
}
inline void SServerInfo::set_loadingscene(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loadingscene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SServerInfo.loadingscene)
}
inline void SServerInfo::set_loadingscene(const char* value,
    size_t size) {
  
  loadingscene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SServerInfo.loadingscene)
}
inline std::string* SServerInfo::_internal_mutable_loadingscene() {
  
  return loadingscene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SServerInfo::release_loadingscene() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SServerInfo.loadingscene)
  return loadingscene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SServerInfo::set_allocated_loadingscene(std::string* loadingscene) {
  if (loadingscene != nullptr) {
    
  } else {
    
  }
  loadingscene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loadingscene,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SServerInfo.loadingscene)
}

// repeated .tdrp.packet.SServerInfo.File files = 4;
inline int SServerInfo::_internal_files_size() const {
  return files_.size();
}
inline int SServerInfo::files_size() const {
  return _internal_files_size();
}
inline void SServerInfo::clear_files() {
  files_.Clear();
}
inline ::tdrp::packet::SServerInfo_File* SServerInfo::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SServerInfo.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tdrp::packet::SServerInfo_File >*
SServerInfo::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:tdrp.packet.SServerInfo.files)
  return &files_;
}
inline const ::tdrp::packet::SServerInfo_File& SServerInfo::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::tdrp::packet::SServerInfo_File& SServerInfo::files(int index) const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SServerInfo.files)
  return _internal_files(index);
}
inline ::tdrp::packet::SServerInfo_File* SServerInfo::_internal_add_files() {
  return files_.Add();
}
inline ::tdrp::packet::SServerInfo_File* SServerInfo::add_files() {
  // @@protoc_insertion_point(field_add:tdrp.packet.SServerInfo.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tdrp::packet::SServerInfo_File >&
SServerInfo::files() const {
  // @@protoc_insertion_point(field_list:tdrp.packet.SServerInfo.files)
  return files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SServerInfo_2eproto
