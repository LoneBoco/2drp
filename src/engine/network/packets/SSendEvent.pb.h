// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SSendEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SSendEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SSendEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SSendEvent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SSendEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SSendEvent_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_SSendEvent_2eproto_metadata_getter(int index);
namespace tdrp {
namespace packet {
class SSendEvent;
struct SSendEventDefaultTypeInternal;
extern SSendEventDefaultTypeInternal _SSendEvent_default_instance_;
}  // namespace packet
}  // namespace tdrp
PROTOBUF_NAMESPACE_OPEN
template<> ::tdrp::packet::SSendEvent* Arena::CreateMaybeMessage<::tdrp::packet::SSendEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tdrp {
namespace packet {

// ===================================================================

class SSendEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.SSendEvent) */ {
 public:
  inline SSendEvent() : SSendEvent(nullptr) {}
  virtual ~SSendEvent();
  explicit constexpr SSendEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSendEvent(const SSendEvent& from);
  SSendEvent(SSendEvent&& from) noexcept
    : SSendEvent() {
    *this = ::std::move(from);
  }

  inline SSendEvent& operator=(const SSendEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSendEvent& operator=(SSendEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSendEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSendEvent* internal_default_instance() {
    return reinterpret_cast<const SSendEvent*>(
               &_SSendEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSendEvent& a, SSendEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SSendEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSendEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSendEvent* New() const final {
    return CreateMaybeMessage<SSendEvent>(nullptr);
  }

  SSendEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSendEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSendEvent& from);
  void MergeFrom(const SSendEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSendEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tdrp.packet.SSendEvent";
  }
  protected:
  explicit SSendEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_SSendEvent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDataFieldNumber = 3,
    kSenderFieldNumber = 1,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kRadiusFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // fixed32 sender = 1;
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::uint32 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sender() const;
  void _internal_set_sender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float radius = 6;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:tdrp.packet.SSendEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sender_;
  float x_;
  float y_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SSendEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSendEvent

// fixed32 sender = 1;
inline void SSendEvent::clear_sender() {
  sender_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSendEvent::_internal_sender() const {
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSendEvent::sender() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.sender)
  return _internal_sender();
}
inline void SSendEvent::_internal_set_sender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sender_ = value;
}
inline void SSendEvent::set_sender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.sender)
}

// string name = 2;
inline void SSendEvent::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SSendEvent::name() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.name)
  return _internal_name();
}
inline void SSendEvent::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.name)
}
inline std::string* SSendEvent::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SSendEvent.name)
  return _internal_mutable_name();
}
inline const std::string& SSendEvent::_internal_name() const {
  return name_.Get();
}
inline void SSendEvent::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSendEvent::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SSendEvent.name)
}
inline void SSendEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SSendEvent.name)
}
inline void SSendEvent::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SSendEvent.name)
}
inline std::string* SSendEvent::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSendEvent::release_name() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SSendEvent.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSendEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SSendEvent.name)
}

// string data = 3;
inline void SSendEvent::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SSendEvent::data() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.data)
  return _internal_data();
}
inline void SSendEvent::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.data)
}
inline std::string* SSendEvent::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SSendEvent.data)
  return _internal_mutable_data();
}
inline const std::string& SSendEvent::_internal_data() const {
  return data_.Get();
}
inline void SSendEvent::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSendEvent::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SSendEvent.data)
}
inline void SSendEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SSendEvent.data)
}
inline void SSendEvent::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SSendEvent.data)
}
inline std::string* SSendEvent::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSendEvent::release_data() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SSendEvent.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSendEvent::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SSendEvent.data)
}

// float x = 4;
inline void SSendEvent::clear_x() {
  x_ = 0;
}
inline float SSendEvent::_internal_x() const {
  return x_;
}
inline float SSendEvent::x() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.x)
  return _internal_x();
}
inline void SSendEvent::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SSendEvent::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.x)
}

// float y = 5;
inline void SSendEvent::clear_y() {
  y_ = 0;
}
inline float SSendEvent::_internal_y() const {
  return y_;
}
inline float SSendEvent::y() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.y)
  return _internal_y();
}
inline void SSendEvent::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SSendEvent::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.y)
}

// float radius = 6;
inline void SSendEvent::clear_radius() {
  radius_ = 0;
}
inline float SSendEvent::_internal_radius() const {
  return radius_;
}
inline float SSendEvent::radius() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.radius)
  return _internal_radius();
}
inline void SSendEvent::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void SSendEvent::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.radius)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SSendEvent_2eproto
