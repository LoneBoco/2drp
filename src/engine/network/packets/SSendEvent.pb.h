// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SSendEvent.proto

#ifndef PROTOBUF_SSendEvent_2eproto__INCLUDED
#define PROTOBUF_SSendEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_SSendEvent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSSendEventImpl();
void InitDefaultsSSendEvent();
inline void InitDefaults() {
  InitDefaultsSSendEvent();
}
}  // namespace protobuf_SSendEvent_2eproto
namespace tdrp {
namespace packet {
class SSendEvent;
class SSendEventDefaultTypeInternal;
extern SSendEventDefaultTypeInternal _SSendEvent_default_instance_;
}  // namespace packet
}  // namespace tdrp
namespace tdrp {
namespace packet {

// ===================================================================

class SSendEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.SSendEvent) */ {
 public:
  SSendEvent();
  virtual ~SSendEvent();

  SSendEvent(const SSendEvent& from);

  inline SSendEvent& operator=(const SSendEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SSendEvent(SSendEvent&& from) noexcept
    : SSendEvent() {
    *this = ::std::move(from);
  }

  inline SSendEvent& operator=(SSendEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSendEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSendEvent* internal_default_instance() {
    return reinterpret_cast<const SSendEvent*>(
               &_SSendEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SSendEvent* other);
  friend void swap(SSendEvent& a, SSendEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSendEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  SSendEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SSendEvent& from);
  void MergeFrom(const SSendEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SSendEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // fixed32 sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  ::google::protobuf::uint32 sender() const;
  void set_sender(::google::protobuf::uint32 value);

  // float x = 4;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // float y = 5;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // float radius = 6;
  void clear_radius();
  static const int kRadiusFieldNumber = 6;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:tdrp.packet.SSendEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 sender_;
  float x_;
  float y_;
  float radius_;
  mutable int _cached_size_;
  friend struct ::protobuf_SSendEvent_2eproto::TableStruct;
  friend void ::protobuf_SSendEvent_2eproto::InitDefaultsSSendEventImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSendEvent

// fixed32 sender = 1;
inline void SSendEvent::clear_sender() {
  sender_ = 0u;
}
inline ::google::protobuf::uint32 SSendEvent::sender() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.sender)
  return sender_;
}
inline void SSendEvent::set_sender(::google::protobuf::uint32 value) {
  
  sender_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.sender)
}

// string name = 2;
inline void SSendEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSendEvent::name() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.name)
  return name_.GetNoArena();
}
inline void SSendEvent::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.name)
}
#if LANG_CXX11
inline void SSendEvent::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SSendEvent.name)
}
#endif
inline void SSendEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SSendEvent.name)
}
inline void SSendEvent::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SSendEvent.name)
}
inline ::std::string* SSendEvent::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SSendEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSendEvent::release_name() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SSendEvent.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSendEvent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SSendEvent.name)
}

// string data = 3;
inline void SSendEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSendEvent::data() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.data)
  return data_.GetNoArena();
}
inline void SSendEvent::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.data)
}
#if LANG_CXX11
inline void SSendEvent::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.SSendEvent.data)
}
#endif
inline void SSendEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdrp.packet.SSendEvent.data)
}
inline void SSendEvent::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.SSendEvent.data)
}
inline ::std::string* SSendEvent::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tdrp.packet.SSendEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSendEvent::release_data() {
  // @@protoc_insertion_point(field_release:tdrp.packet.SSendEvent.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSendEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.SSendEvent.data)
}

// float x = 4;
inline void SSendEvent::clear_x() {
  x_ = 0;
}
inline float SSendEvent::x() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.x)
  return x_;
}
inline void SSendEvent::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.x)
}

// float y = 5;
inline void SSendEvent::clear_y() {
  y_ = 0;
}
inline float SSendEvent::y() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.y)
  return y_;
}
inline void SSendEvent::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.y)
}

// float radius = 6;
inline void SSendEvent::clear_radius() {
  radius_ = 0;
}
inline float SSendEvent::radius() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.SSendEvent.radius)
  return radius_;
}
inline void SSendEvent::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.SSendEvent.radius)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SSendEvent_2eproto__INCLUDED
