// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CLogin.proto

#ifndef PROTOBUF_CLogin_2eproto__INCLUDED
#define PROTOBUF_CLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_CLogin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCLoginImpl();
void InitDefaultsCLogin();
inline void InitDefaults() {
  InitDefaultsCLogin();
}
}  // namespace protobuf_CLogin_2eproto
namespace tdrp {
namespace packet {
class CLogin;
class CLoginDefaultTypeInternal;
extern CLoginDefaultTypeInternal _CLogin_default_instance_;
}  // namespace packet
}  // namespace tdrp
namespace tdrp {
namespace packet {

// ===================================================================

class CLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.CLogin) */ {
 public:
  CLogin();
  virtual ~CLogin();

  CLogin(const CLogin& from);

  inline CLogin& operator=(const CLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLogin(CLogin&& from) noexcept
    : CLogin() {
    *this = ::std::move(from);
  }

  inline CLogin& operator=(CLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLogin* internal_default_instance() {
    return reinterpret_cast<const CLogin*>(
               &_CLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CLogin* other);
  friend void swap(CLogin& a, CLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  CLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CLogin& from);
  void MergeFrom(const CLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string passwordhash = 2;
  void clear_passwordhash();
  static const int kPasswordhashFieldNumber = 2;
  const ::std::string& passwordhash() const;
  void set_passwordhash(const ::std::string& value);
  #if LANG_CXX11
  void set_passwordhash(::std::string&& value);
  #endif
  void set_passwordhash(const char* value);
  void set_passwordhash(const char* value, size_t size);
  ::std::string* mutable_passwordhash();
  ::std::string* release_passwordhash();
  void set_allocated_passwordhash(::std::string* passwordhash);

  // string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tdrp.packet.CLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passwordhash_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_CLogin_2eproto::TableStruct;
  friend void ::protobuf_CLogin_2eproto::InitDefaultsCLoginImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CLogin

// string account = 1;
inline void CLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLogin::account() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.account)
  return account_.GetNoArena();
}
inline void CLogin::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.account)
}
#if LANG_CXX11
inline void CLogin::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.CLogin.account)
}
#endif
inline void CLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdrp.packet.CLogin.account)
}
inline void CLogin::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.CLogin.account)
}
inline ::std::string* CLogin::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:tdrp.packet.CLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLogin::release_account() {
  // @@protoc_insertion_point(field_release:tdrp.packet.CLogin.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.CLogin.account)
}

// string passwordhash = 2;
inline void CLogin::clear_passwordhash() {
  passwordhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLogin::passwordhash() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.passwordhash)
  return passwordhash_.GetNoArena();
}
inline void CLogin::set_passwordhash(const ::std::string& value) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.passwordhash)
}
#if LANG_CXX11
inline void CLogin::set_passwordhash(::std::string&& value) {
  
  passwordhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.CLogin.passwordhash)
}
#endif
inline void CLogin::set_passwordhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdrp.packet.CLogin.passwordhash)
}
inline void CLogin::set_passwordhash(const char* value, size_t size) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.CLogin.passwordhash)
}
inline ::std::string* CLogin::mutable_passwordhash() {
  
  // @@protoc_insertion_point(field_mutable:tdrp.packet.CLogin.passwordhash)
  return passwordhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLogin::release_passwordhash() {
  // @@protoc_insertion_point(field_release:tdrp.packet.CLogin.passwordhash)
  
  return passwordhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLogin::set_allocated_passwordhash(::std::string* passwordhash) {
  if (passwordhash != NULL) {
    
  } else {
    
  }
  passwordhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwordhash);
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.CLogin.passwordhash)
}

// uint32 type = 3;
inline void CLogin::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 CLogin::type() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.type)
  return type_;
}
inline void CLogin::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.type)
}

// string version = 4;
inline void CLogin::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLogin::version() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.version)
  return version_.GetNoArena();
}
inline void CLogin::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.version)
}
#if LANG_CXX11
inline void CLogin::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.CLogin.version)
}
#endif
inline void CLogin::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdrp.packet.CLogin.version)
}
inline void CLogin::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.CLogin.version)
}
inline ::std::string* CLogin::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:tdrp.packet.CLogin.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLogin::release_version() {
  // @@protoc_insertion_point(field_release:tdrp.packet.CLogin.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLogin::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.CLogin.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CLogin_2eproto__INCLUDED
