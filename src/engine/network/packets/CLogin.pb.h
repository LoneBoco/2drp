// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CLogin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CLogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CLogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CLogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CLogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CLogin_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_CLogin_2eproto_metadata_getter(int index);
namespace tdrp {
namespace packet {
class CLogin;
struct CLoginDefaultTypeInternal;
extern CLoginDefaultTypeInternal _CLogin_default_instance_;
}  // namespace packet
}  // namespace tdrp
PROTOBUF_NAMESPACE_OPEN
template<> ::tdrp::packet::CLogin* Arena::CreateMaybeMessage<::tdrp::packet::CLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tdrp {
namespace packet {

// ===================================================================

class CLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tdrp.packet.CLogin) */ {
 public:
  inline CLogin() : CLogin(nullptr) {}
  virtual ~CLogin();
  explicit constexpr CLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLogin(const CLogin& from);
  CLogin(CLogin&& from) noexcept
    : CLogin() {
    *this = ::std::move(from);
  }

  inline CLogin& operator=(const CLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLogin& operator=(CLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLogin* internal_default_instance() {
    return reinterpret_cast<const CLogin*>(
               &_CLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CLogin& a, CLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLogin* New() const final {
    return CreateMaybeMessage<CLogin>(nullptr);
  }

  CLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLogin& from);
  void MergeFrom(const CLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tdrp.packet.CLogin";
  }
  protected:
  explicit CLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_CLogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordhashFieldNumber = 2,
    kVersionFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string passwordhash = 2;
  void clear_passwordhash();
  const std::string& passwordhash() const;
  void set_passwordhash(const std::string& value);
  void set_passwordhash(std::string&& value);
  void set_passwordhash(const char* value);
  void set_passwordhash(const char* value, size_t size);
  std::string* mutable_passwordhash();
  std::string* release_passwordhash();
  void set_allocated_passwordhash(std::string* passwordhash);
  private:
  const std::string& _internal_passwordhash() const;
  void _internal_set_passwordhash(const std::string& value);
  std::string* _internal_mutable_passwordhash();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tdrp.packet.CLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwordhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CLogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CLogin

// string account = 1;
inline void CLogin::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& CLogin::account() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.account)
  return _internal_account();
}
inline void CLogin::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.account)
}
inline std::string* CLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.CLogin.account)
  return _internal_mutable_account();
}
inline const std::string& CLogin::_internal_account() const {
  return account_.Get();
}
inline void CLogin::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLogin::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.CLogin.account)
}
inline void CLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.CLogin.account)
}
inline void CLogin::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.CLogin.account)
}
inline std::string* CLogin::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLogin::release_account() {
  // @@protoc_insertion_point(field_release:tdrp.packet.CLogin.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.CLogin.account)
}

// string passwordhash = 2;
inline void CLogin::clear_passwordhash() {
  passwordhash_.ClearToEmpty();
}
inline const std::string& CLogin::passwordhash() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.passwordhash)
  return _internal_passwordhash();
}
inline void CLogin::set_passwordhash(const std::string& value) {
  _internal_set_passwordhash(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.passwordhash)
}
inline std::string* CLogin::mutable_passwordhash() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.CLogin.passwordhash)
  return _internal_mutable_passwordhash();
}
inline const std::string& CLogin::_internal_passwordhash() const {
  return passwordhash_.Get();
}
inline void CLogin::_internal_set_passwordhash(const std::string& value) {
  
  passwordhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLogin::set_passwordhash(std::string&& value) {
  
  passwordhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.CLogin.passwordhash)
}
inline void CLogin::set_passwordhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwordhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.CLogin.passwordhash)
}
inline void CLogin::set_passwordhash(const char* value,
    size_t size) {
  
  passwordhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.CLogin.passwordhash)
}
inline std::string* CLogin::_internal_mutable_passwordhash() {
  
  return passwordhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLogin::release_passwordhash() {
  // @@protoc_insertion_point(field_release:tdrp.packet.CLogin.passwordhash)
  return passwordhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLogin::set_allocated_passwordhash(std::string* passwordhash) {
  if (passwordhash != nullptr) {
    
  } else {
    
  }
  passwordhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwordhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.CLogin.passwordhash)
}

// uint32 type = 3;
inline void CLogin::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLogin::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLogin::type() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.type)
  return _internal_type();
}
inline void CLogin::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void CLogin::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.type)
}

// string version = 4;
inline void CLogin::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& CLogin::version() const {
  // @@protoc_insertion_point(field_get:tdrp.packet.CLogin.version)
  return _internal_version();
}
inline void CLogin::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tdrp.packet.CLogin.version)
}
inline std::string* CLogin::mutable_version() {
  // @@protoc_insertion_point(field_mutable:tdrp.packet.CLogin.version)
  return _internal_mutable_version();
}
inline const std::string& CLogin::_internal_version() const {
  return version_.Get();
}
inline void CLogin::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLogin::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tdrp.packet.CLogin.version)
}
inline void CLogin::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tdrp.packet.CLogin.version)
}
inline void CLogin::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tdrp.packet.CLogin.version)
}
inline std::string* CLogin::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLogin::release_version() {
  // @@protoc_insertion_point(field_release:tdrp.packet.CLogin.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLogin::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tdrp.packet.CLogin.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace tdrp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CLogin_2eproto
