<rml>
<head>
	<title>Inventory</title>
	<link type="text/css" href="rml.rcss"/>
	<style>
		body {
			z-index: 10
		}

		#inventory {
			width: 80%;
			height: 80%;
			margin: auto;
		}
		#container {
			width: 100%;
			height: 100%;
			background-color: rgba(255, 231, 144, 255);
			border-color: rgba(255, 176, 144, 255);
			border-width: 4dp;
			border-radius: 15dp;
		}

		.filters {
			display: block;
			height: 2em;
			padding: 1em;
		}
		.filters input[type='checkbox'] {
			border-width: 1dp;
			border-color: black;
			margin-right: 5dp;
		}
		.filters input[type='checkbox']:checked {
			background-color: rgba(96, 96, 96, 255);
		}
		.filters label {
			margin-right: 2em;
		}

		#container-items {
			width: 100%;
/*			height: 100%;*/
			display: flex;
			flex-wrap: wrap;
			align-content: flex-start;
		}
		#container-items.weapon .item.weapon {
			display: block;
		}
		#container-items.resource .item.resource {
			display: block;
		}
		.item {
			flex: 0 1 auto;
			margin: 15dp 0 0 15dp;
			display: none;
		}
		.item:hover, .item:focus {
			background-color: rgba(225, 201, 114, 255);
		}
		.item table, .item tr {
			min-width: 64dp;
			min-height: 64dp;
		}
		.item td {
			text-align: center;
			vertical-align: middle;
		}
		.image-center {
			display: block;
			text-align: center;
		}
	</style>
	<script>

		-- Create the data model before we call onload.
		--[[if dmInventory == nil then
			dmInventory = rmlui.GetContext('hud'):OpenDataModel('inventory', {
				test = 'testing',
				testbool = true,
				items = {
					{name = 'Item1', image = 'block_sword.png'},
					{name = 'Item2', image = 'block_sword.png'},
					{name = 'Item3', image = 'block_sword.png'}
				}
			})
		end--]]

		function Show(element)
			local filters = element.owner_document:GetElementById('filters')
			Element.As.ElementForm(filters):Submit()

			local curitem = Game.Flags.CurrentItem or 0
			local select = element:GetElementById(curitem)
			if select == nil then return end
			select:Focus()
		end

		function KeyDown(event, element)
			local cur_focus = element:QuerySelector('#container-items button:focus')
			if cur_focus == nil then
				cur_focus = element.QuerySelector('#container-items button:first-child')
			end

			local next_focus = nil
			if event.parameters.key_identifier == RmlKeyIdentifier.LEFT then
				next_focus = cur_focus.previous_sibling
			elseif event.parameters.key_identifier == RmlKeyIdentifier.RIGHT then
				next_focus = cur_focus.next_sibling
			elseif event.parameters.key_identifier == RmlKeyIdentifier.RETURN then
				Select(cur_focus)
				return
			end

			if next_focus == nil or next_focus.visible == false then return end
			next_focus:Focus()
		end

		function Select(element)
			Game.Flags.CurrentItem = element.id
			element.owner_document:Hide()
		end

		function ChangeFilter(event, element)
			element:ProcessDefaultAction(event)
			Element.As.ElementForm(element.parent_node):Submit()
			event:StopPropagation()
		end

		function SubmitFilter(event, document)
			local container = document:GetElementById('container-items')
			local filter = event.parameters.filter
			container.class_name = ''
			if filter ~= nil then
				local classes = string.gsub(filter, ',', '')
				container.class_name = classes
			end
		end

	</script>
</head>
<body id="inventory" onshow="Show(element)" onkeydown="KeyDown(event, element)">
	<div id="container">
		<form id="filters" class="filters" onsubmit="SubmitFilter(event, document)">
			<input type="checkbox" name="filter" value="weapon" checked onclick="ChangeFilter(event, element)"/>
			<label for="weapon">Weapon</label>
			<input type="checkbox" name="filter" value="resource" checked onclick="ChangeFilter(event, element)"/>
			<label for="resource">Resource</label>
		</form>
		<div id="container-items" data-model="items">
			<button type="button" data-for="item : items" data-attr-id="item.id" data-attr-name="item.name" data-attr-class="concat('item', item.tags)" onclick="Select(element)" >
				<table>
					<tr>
						<td>
							<div class="image-center"><img data-attr-src="item.image"/></div>
							<span class="name">{{item.name}}</span>
						</td>
					</tr>
				</table>
			</button>
		</div>
	</div>
</body>
</rml>
